package main

import "fmt"

func main() {

	fmt.Println(10 / 4) //  2
	var num1 float32 = 10 / 4
	fmt.Println(num1) // 2

	// 1.如果运算的数都是整数，结果去掉小数部分，只保留整数
	// 2.如果需要保留小数部分，则需要浮点数参与运算
	// 3.模运算%  a % b = a - a / b * b

	var num2 float32 = 10.0 / 4
	fmt.Println(num2)

	// go语言中 ++ -- 只能独立使用，且只能写在变量的后面

	// 关系运算符（比较运算符）
	// 运算符的结果是bool类型
	// == != < > >= <=
	// 逻辑运算符，连接多个条件
	// &&与（短路与）	||或（短路或）	!非
	// 赋值运算符：=	+=	-=	/=	*=	%=	<<=	>>=	&=	^=	|=
	// 赋值运算符运算顺序从右向左，左边只能是变量，右边可以是变量，常量值，表达式
	// 只有单目运算符和赋值运算符的运算顺序是从右向左的
	// 运算符的优先级：括号，++，--	>	单目运算符	>	算术运算符	>	位移运算符	>	关系运算符	>	位运算符	>	逻辑运算符	>	赋值运算符	>	逗号运算符
	// go语言不提供三元运算符

	// 交换a，b的值，不使用中间变量
	var a int8 = 10
	var b int8 = 20
	a = a + b
	b = a - b
	a = a - b
	fmt.Println("a=", a)
	fmt.Println("b=", b)

	// 位运算：
	// 按位与&：有0则0
	// 按位或|:有1则1
	// 按位异或^：相同为0，不同为1
	// 位移运算：>>右移运算	<<左移运算
	// 运算规则：>>低位溢出，符号位不变，用符号位补全溢出的高位
	// 					<<符号位不变，低位补0
}
